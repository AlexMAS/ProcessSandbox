<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppName" xml:space="preserve">
    <value>sandbox</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>NAME
    sandbox - run a command with given limits

SYNOPSIS
    sandbox RESULT_FILE WORKING_DIR COMMAND [ARGS]

DESCRIPTION
    Start COMMAND, and kill it if given limits are exceeded.

    As COMMAND terminates its resource usage statistics are stored in RESULT_FILE
    that contains the following metrics line by line:
        the exit code
        the elapsed time in milliseconds
        the CPU usage in milliseconds
        the memory usage, in bytes
        the standard output length in characters (stdout)
        whether the standard output limit exceeded (0 if no)
        the standard error length in characters (stderr)
        whether the standard error limit exceeded (0 if no)
        whether COMMAND is self-completed (0 if no)
        whether there were children processes (0 if there were not)

    Arguments:
        RESULT_FILE is the result file to store resource usage statistics;
        WORKING_DIR is the working directory for the command to be started;
        COMMAND     is the command to execute;
        ARGS        are the command arguments.

    To define additional COMMAND startup parameters use the next environment variables:
        SANDBOX_USER               is a user name on behalf whom the process will be executed
                                     (the current user by default);
        SANDBOX_TOTAL_TIMEOUT      is the total timeout in milliseconds to execute COMMAND
                                     (unlimited by default or in case of negative values);
        SANDBOX_CPU_LIMIT          is the CPU usage limit in milliseconds
                                     (unlimited by default or in case of negative values);
        SANDBOX_CPU_LIMIT_ADDITION is an addition in milliseconds to form the soft limit of the CPU usage
                                     (0 by default or in case of negative values);
        SANDBOX_MEMORY_LIMIT       is the memory usage limit in bytes
                                     (unlimited by default or in case of negative values);
        SANDBOX_STDOUT_LIMIT       is the standard output limit in characters
                                     (unlimited by default or in case of negative values);
        SANDBOX_STDERR_LIMIT       is the standard error limit in characters
                                     (unlimited by default or in case of negative values);
        SANDBOX_THREAD_COUNT_LIMIT is the maximum number of executing threads
                                     (unlimited by default or in case of negative values);
        SANDBOX_FILE_SIZE_LIMIT    is the maximum file size in bytes that the process may create
                                     (unlimited by default or in case of negative values);
        SANDBOX_OPEN_FILE_LIMIT    is the maximum number of file descriptors that the process may hold open
                                     (unlimited by default or in case of negative values);
        SANDBOX_CHILDREN_FORBIDDEN to forbid creating child processes
                                     (children are allowed by default, set 1 to forbid);
        SANDBOX_LOG_LEVEL          defines verbosity of the utility logging
                                     (FATAL by default, available - DEBUG/INFO/WARN/ERROR);
        SANDBOX_SYSLOG             to enable output to the syslog
                                     (syslog is disabled by default, set 1 to enable).

    Exit code:
        If COMMAND is self completed the exit code coincide with the COMMAND's exit code;
        otherwise use the table below. Whether COMMAND is self-completed defined in RESULT_FILE.

        200 wrong number of arguments or their format (this help)
        201 unable to start COMMAND
        202 unable to redirect COMMAND output (stdout)
        203 unable to redirect COMMAND error output (stderr)
        204 unable to redirect COMMAND input (stdin)
        205 SANDBOX_TOTAL_TIMEOUT is exceeded
        206 SANDBOX_CPU_LIMIT is exceeded
        207 SANDBOX_MEMORY_LIMIT is exceeded
        208 child processes found
        209 an unexpected error
        -   the exit code of COMMAND otherwise
</value>
  </data>
</root>